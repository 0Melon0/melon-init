apiVersion: apps/v1   #指定api版本标签
kind: Deployment   #定义资源的类型/角色，deployment 为副本控制器，此处资源类型可以是Deployment、Job、 Ingress、 Service等
metadata:     #定义资源的元数据信息，比如资源的名称、namespace、标签等信息
  name: {{projectName}}-deployment   #定义资源的名称，在同一个namespace空间中必须是唯一的,后面需保留deployment,yaml文件不支持驼峰
  namespace: {{bluej}} #定义命名空间,默认bluej
  labels:          #定义资源标签(Pod的标签)
    app: {{projectName}}
spec:        #定义deployment资源需要的参数属性，诸如是否在容器失败时重新启动容器的属性
  replicas: 2     #定义副本数量
  revisionHistoryLimit: 1 # 保留历史版本
  selector :      #定义标签选择器
    matchLabels:   #定义匹配标签
      app: {{projectName}}  #匹配上面的标签，需与上面的标签定义的app保持一致
  strategy: # 策略
    rollingUpdate: # 滚动更新
      maxSurge: 30% # 最大额外可以存在的副本数，可以为百分比，也可以为整数
      maxUnavailable: 30% # 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数
    type: RollingUpdate # 滚动更新策略    
  template:        #定义业务模板，如果有多个副本，所有副本的属性会按照模板的相关配置进行匹配
    metadata:
      labels:
        app: {{projectName}}
    spec:
      imagePullSecrets: 
        - name: coding-registry-cred-8067169 #coding仓库授权拉取镜像
      containers:            #定义容器属性
        - image: 'bluej-docker.pkg.coding.net/egg_test/egg-backend-website/egg-website:master-fed8f93fe3991efe612a0fe57448fd990104cdf4'  #定义容器使用的镜像以及版本
          name: {{projectName}}          #定义一个容器名，一个- name: 定义一个容器
          ports:
            - containerPort: 7001   #定义容器的对外的端口

#缩进和换行要对应保留